# -*- coding: utf-8 -*-
"""python lab assinment

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ZgFLg7fN9rGQM2q7OF9ItDN1Wbp5eGch

wrie a program to caluclate the area of circle in given radius
"""

a=10
def area(a):
  return 3.14*a*a
print(area(a))

"""write creat a program that take user input from a temperture in celusius and convert into fahernit"""

# Commented out IPython magic to ensure Python compatibility.

celsius = 47

fahrenheit = (celsius * 1.8) + 32

print('%.2f Celsius is equivalent to: %.2f Fahrenheit'
# 	% (celsius, fahrenheit))

"""implement a calculater that perform basic arthmatic opration (addition ,substraction ,multiplication ,division) based on user input"""

# add two numbers
def add(num1, num2):
    return num1 + num2

# subtract two numbers
def subtract(num1, num2):
    return num1 - num2

# multiply two numbers
def multiply(num1, num2):
    return num1 * num2

# divide two numbers
def divide(num1, num2):
    return num1 / num2

print("Please select operation -\n" \
        "1  = Add\n" \
        "2 = Subtract\n" \
        "3 = Multiply\n" \
        "4 = Divide\n")

select = int(input("Select operations form 1, 2, 3, 4 :"))

n1 = int(input("Enter first number: "))
n2= int(input("Enter second number: "))

if select == 1:
    print(n1, "+", n2, "=", add(n1,n2))

elif select == 2:
    print(n1, "-", n2, "=",subtract(n1, n2))

elif select == 3:
    print(n1, "*", n2, "=", multiply(n1, n2))

elif select == 4:
    print(n1, "/", n2, "=", divide(n1, n2))
else:
    print("Invalid input")

"""Write a program that checks if a number is even or odd."""

n = int(input("Enter a number: "))
if (n % 2) == 0:
   print("this is Even")
else:
   print("this is Odd")

"""Develop a function that takes a string as input and returns the string reversed"""

s = "swati_prajapati"
rev = ''.join(reversed(s))
print(rev)

"""Create a program that asks the user for their age and prints whether they are a minor,adult, or senior"""

age = int(input("Enter your age: "))

if age < 18:
  print("minor")
elif age >= 18 and age < 65:
  print("adult")
else:
  print("senior")

"""Write a program that evaluates three numbers and prints the largest one"""

a =23
b=12
c=32
if a>b and a>c:
  print("a is larger number")
  if b>a and b>c:
    print("b is larger number")
else:
  print("c is larger than a and b")

"""Implement a program that gives feedback based on a user's score (A, B. C. D.F)."""

def feedback(score):
  if score >= 80:
    print("Excellent score : A grad ")
  elif score >= 70:
    print("Good score.B grad")
  elif score >= 60:
     print("average score.C grad")
  elif score >= 50:
     print("average score.D grad")
  else:
    print("F grad")
score =int (input("enter score"))
feedback(score)

"""Write a program to check if a year is leap year"""

def leapyear(year):
  if (year % 4==0 and year % 100 != 0):
    print ("this is leap ")
  elif (year% 400 == 0):
    print ("this is leap ")
  else :
    print ("this is not leap ")
year=int(input("enter year "))
leapyear(year)

""" Develop a simple login system that checks a username and password."""

def logic():

  username = input("Enter your username: ")
  password = input("Enter your password: ")

  if username == user and password == code:
    print("Login successful!")
  else:
    print("Invalid username or password.")

user = "swati"
code = "12345"
logic()

"""11. Write a Python program that counts the number of vovels in a given string."""

def check_vowels(s):
  vowel=['a','e','i','o','u','A','E','I','U','O']
  for s in vowel:
    return True
  else:
    return False
def count_vowels(s):
  count=0
  for i in s:
    count +=1
    return count

s = "a"
print(check_vowels(s))
print(count_vowels(s))

"""12. Create a function that removes all whitespace from a user-inputted string"""

def string_a(text):
  return text.replace(" ", "")

text ="swati prajapati"
print(string_a("swati prajapati"))

"""13. Implement a program to check if two strings are anagrams of each other."""

def are_anagrams(str1, str2):

  str1 = str1.lower().replace(" ", "")
  str2 = str2.lower().replace(" ", "")

  return sorted(str1) == sorted(str2)

string1 = input("Enter the first string: ")
string2 = input("Enter the second string: ")

if are_anagrams(string1, string2):
  print("The strings are anagrams.")
else:
  print("The strings are not anagrams.")

"""14. Write a program to count the frequency of words in a given sentence"""

def frequency(sentence):
    words = sentence.split()

    word_count = {}

    for word in words:
        word = word.lower()
        if word in word_count:
            word_count[word] += 1
        else:
            word_count[word] = 1

    return word_count

sentence = input("Enter a sentence: ")
result = frequency(sentence)

print("Word frequency count:")
for word, count in result.items():
    print(f"{word}: {count}")

"""15. Create a fuinction that replaces every occurrence of a substring with another substring in a string"""

input_string = "swatiprajapati"
s1 = "swati"
s2 = "rajeshwari"
input_string = input_string.replace(s1, s2)
print(input_string)

"""16. Write a program that generates the first 10 Fibonacci numbers using iteration"""

num1 = 0
num2 = 1
next_number = num1
count = 1

while count <= 10:
    print(next_number, end=" ")
    count += 1
    num1 = num2
    num2 = next_number
    next_number = num1 + num2
print()

"""17. Create a program that sums all ever numbers from 1 to 100"""

total = 0
for num in range(1,101):
  if num % 2 ==0:
    total += num
print(" sum is all ever numbers from 1 to 100")
print("total",total)

"""18. Write a Python script that prints the multiplication table of a user-defined
number.
"""

num = int (input("enter a number"))

for i in range(1, 11):
   print(num, 'x', i, '=', num*i)

"""19. Develop a program that calculates the factorial of a number using a loop"""

num = 3
factorial = 1

if num < 0:
   print("factorial not exist for negative numbers")
elif num == 0:
   print("factorial of 0 is 1")
else:
   for i in range(1,num + 1):
       factorial = factorial*i
   print("The factorial of",num,"is",factorial)

"""20. Create a function that lists all prime numbers up to a specified limit."""

def prime(x, y):
    prime_list = []
    for i in range(x, y):
        if i == 0 or i == 1:
            continue
        else:
            for j in range(2, int(i/2)+1):
                if i % j == 0:
                    break
            else:
                prime_list.append(i)
    return prime_list

starting_range = 1
ending_range = 15
lst = prime(starting_range, ending_range)
if len(lst) == 0:
    print("There are no prime numbers in this range")
else:
    print("The prime numbers in this range are: ", lst)

"""21. Write a function that calculates the greatest common divisor (GCD) of two numbers."""

def gcd(a, b):
    while b != 0:
        a , b = b , a % b
    return a

x = 48
y = 18
print(f"The GCD of {x} and {y} is {gcd(x, y)}")

"""22. Create a Python function that takes a list of numbers and returns the largest number"""

a = [10, 24, 76, 23, 12]

largest = max(a)
print(largest)

"""23.	Implement a function for finding the factorial of a number using recursion."""

def Recursion(num):
  if num == 1:
    return 1
  else:
    return num* Recursion(num-1)

num = 5
Recursion(num)

"""24.	Write a program that utilizes global variables and demonstrates their use in functions."""

G_var = 10

def modify_global():
  global G_var
  G_var = 31

def access_global():
  print(G_var)

access_global()
modify_global()
access_global()

"""25.	Develop a module that contains utility functions for string manipulations."""

import string

print(string.ascii_letters)

print(string.ascii_lowercase)

print(string.ascii_uppercase)

print(string.digits)

print(string.hexdigits)

print(string.octdigits)

print(string.punctuation)

print(string.printable)

print(string.whitespace)

"""26.	Write a simple testing script that verifies the functionality of your calculator from a previous assignment."""

def calc(a,num1,num2):
  if a == 1:
    return num1 + num2
  if a == 2:
    return num1 - num2
  if a == 3:
    return num1 * num2
  if a == 4:
    return num1 / num2
  else:
    print("invaid statament")

calc(2,24,12)

"""27.	Create a program that includes debugging statements to show the flow of execution."""

def add_numbers(a, b):
    print(f"Entering add_numbers function with arguments: a = {a}, b = {b}")
    result = a + b
    print(f"Result of addition: {result}")
    return result
def main():
    print("Program started.")

    # Variables to test the functions
    num1 = 5
    num2 = 10

    print(f"Calling add_numbers with {num1} and {num2}")
    addition_result = add_numbers(num1, num2)

    print(f"Addition result: {addition_result}")

    print("Program ended.")

if __name__ == "__main__":
    main()

"""28.	Implement a function and write unit tests to confirm its correctness using assertions"""

def factorial(n):
    if n < 0:
        print("Input must be a non-negative integer")
    if n == 0:
        return 1
    result = 1
    if n>0:
      return n*factorial(n-1)

def test_factorial():
    # Test factorial of 0
    assert factorial(0) == 1, "Test Case 1 Failed"

    # Test factorial of 1
    assert factorial(1) == 1, "Test Case 2 Failed"

    # Test factorial of 2
    assert factorial(2) == 2, "Test Case 3 Failed"

    # Test factorial of 3
    assert factorial(3) == 6, "Test Case 4 Failed"

    # Test factorial of 4
    assert factorial(4) == 24, "Test Case 5 Failed"

    # Test factorial of 5
    assert factorial(5) == 120, "Test Case 6 Failed"

    print("All test cases passed!")

print(factorial(5))
test_factorial()

"""29.	Write a program that intentionally has a bug, and then demonstrate how to fix it."""

def calculate_average(numbers):
    if len(numbers) == 0:
        return None

    total = 0
    for number in numbers:
        total += number

    return total / len(numbers)

numbers = []
result = calculate_average(numbers)

if result is None:
    print("Cannot calculate the average: The list is empty.")
else:
    print("Average:", result)

"""30.	Create a logging system that tracks function calls and their parameters."""

import logging
from functools import wraps

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(message)s')
logger = logging.getLogger(__name__)

def log_function_call(func):
    @wraps(func)
    def wrapper(*args, **kwargs):
        logger.info(f"Calling function: {func.__name__} with arguments: {args} and keyword arguments: {kwargs}")

        result = func(*args, **kwargs)

        logger.info(f"Function: {func.__name__} returned: {result}")

        return result
    return wrapper

@log_function_call
def add(a, b):
    return a + b

@log_function_call
def greet(name, greeting="Hello"):
    return f"{greeting}, {name}!"

@log_function_call
def multiply(x, y):
    return x * y

add(2, 3)
greet("Alice", greeting="Hi")
multiply(4, 5)

"""31.	Write a Python script to demonstrate the usage of tuples for storing coordinates."""

point1 = (2, 3)  # Represents x = 2, y = 3
point2 = (5, 7)  # Represents x = 5, y = 7

x1, y1 = point1  # Unpacking the tuple
x2, y2 = point2

print(x1,y1)
print(x2,y2)

distance = ((x2 - x1)**2 + (y2 - y1)**2)**0.5
print(f"Distance between points: {distance}")

"""32.	Create a program that uses lists and demonstrates mutability by modifying the list items."""

list1 = ['a','b','c']
print(list1)
list1.append('d')
print(list1)

"""33.	Implement a higher-order function that takes another function as an argument and applies it to a list."""

def sqr(x):
  return x*x

def func(func, lst):
  result = []
  for item in lst:
    result.append(func(item))
  return result

numbers = [1, 2, 3, 4, 5]
squared = func(sqr, numbers)
print(squared)

"""34.	Write a program to simulate a simple inventory system using dictionaries."""

class InventorySystem:
    def __init__(self):
        self.inventory = {}

    def add_item(self, item_name, quantity):
        """Adds a new item or updates an existing item in the inventory."""
        if item_name in self.inventory:
            self.inventory[item_name] += quantity
            print(f"Updated {item_name} quantity to {self.inventory[item_name]}.")
        else:
            self.inventory[item_name] = quantity
            print(f"Added {item_name} with quantity {quantity}.")

    def remove_item(self, item_name):
        """Removes an item from the inventory."""
        if item_name in self.inventory:
            del self.inventory[item_name]
            print(f"Removed {item_name} from the inventory.")
        else:
            print(f"Item {item_name} not found in the inventory.")

    def update_quantity(self, item_name, quantity):
        """Updates the quantity of an existing item in the inventory."""
        if item_name in self.inventory:
            self.inventory[item_name] = quantity
            print(f"Updated {item_name} to quantity {quantity}.")
        else:
            print(f"Item {item_name} not found in the inventory.")

    def display_inventory(self):
        """Displays the current inventory."""
        if self.inventory:
            print("\nCurrent Inventory:")
            for item_name, quantity in self.inventory.items():
                print(f"{item_name}: {quantity}")
        else:
            print("Inventory is empty.")

def inventory_menu():
    inventory_system = InventorySystem()

    while True:
        print("\nInventory Menu:")
        print("1. Add Item")
        print("2. Remove Item")
        print("3. Update Item Quantity")
        print("4. Display Inventory")
        print("5. Exit")

        choice = input("Choose an option (1-5): ")

        if choice == '1':
            item_name = input("Enter item name: ")
            quantity = int(input("Enter item quantity: "))
            inventory_system.add_item(item_name, quantity)

        elif choice == '2':
            item_name = input("Enter item name to remove: ")
            inventory_system.remove_item(item_name)

        elif choice == '3':
            item_name = input("Enter item name to update: ")
            quantity = int(input("Enter new quantity: "))
            inventory_system.update_quantity(item_name, quantity)

        elif choice == '4':
            inventory_system.display_inventory()

        elif choice == '5':
            print("Exiting the inventory system. Goodbye!")
            break

        else:
            print("Invalid choice. Please select a valid option.")

if __name__ == "__main__":
    inventory_menu()

"""35.	Create a function that sorts a list of dictionaries by a specified key."""

list = [{"name": "Nandini", "age": 20},
       {"name": "Manjeet", "age": 20},
       {"name": "Nikhil", "age": 19}]

print("list printed sorting by age: ")
print(sorted(list, key=lambda i: i['age']))

print("\r")

print("list printed sorting by age and name: ")
print(sorted(list, key=lambda i: (i['age'], i['name'])))

print("\r")

print("list printed sorting by age in descending order: ")
print(sorted(list, key=lambda i: i['age'], reverse=True))

"""36.	Write a program that reads a file and handles exceptions if the file does not exist."""

def read_file(file_name):
    try:
        with open(file_name, 'r') as file:
            content = file.read()
            print(content)
    except FileNotFoundError:
        print(f"Error: The file '{file_name}' does not exist.")
    except Exception as e:
        print(f"An unexpected error occurred: {e}")

# Example usage
file_name = input("Enter the file name: ")
read_file(file_name)

"""37.	Create a function that raises an exception if the input is not a positive number."""

def check_number(value):
    if value <= 0:
        raise ValueError("Input must be a positive number.")
    return value
    try:
        number = float(input("Enter a positive number: "))
        result = check_number(number)
        print(f"Valid positive number: {result}")
    except ValueError as e:
        print(f"Error: {e}")
        return value

value = float(input("Enter a number: "))
check_number(value)

"""38.	Implement a program that uses assertions to check the validity of user input."""

def get_positive_integer():
    user_input = input("Enter a positive integer: ")

    # Check if the input is a valid positive integer using an assertion
    try:
        value = int(user_input)
        assert value > 0, "The number must be positive."
        print(f"Valid input: {value}")
    except ValueError:
        print("Error: The input must be an integer.")
    except AssertionError as e:
        print(f"Error: {e}")

get_positive_integer()

"""39.	Write a function to demonstrate the use of try-except blocks when dividing numbers."""

def divide_numbers():
    try:
        numerator = float(input("Enter the numerator: "))
        denominator = float(input("Enter the denominator: "))
        result = numerator / denominator
        print(f"The result of {numerator} divided by {denominator} is {result}.")

    except ZeroDivisionError:
        print("Error: Cannot divide by zero.")

    except ValueError:
        print("Error: Please enter valid numbers.")

    except Exception as e:
        print(f"An unexpected error occurred: {e}")

divide_numbers()

"""40.	Create a program that captures and logs exceptions thrown in a mathematical computation."""

import logging

logging.basicConfig(
    filename='math_operations.log',
    level=logging.ERROR,
    format='%(asctime)s - %(levelname)s - %(message)s'
)

def perform_computation(x, y, operation):
    try:
        if operation == 'add':
            result = x + y
        elif operation == 'subtract':
            result = x - y
        elif operation == 'multiply':
            result = x * y
        elif operation == 'divide':
            if y == 0:
                raise ZeroDivisionError("Cannot divide by zero.")
            result = x / y
        else:
            raise ValueError(f"Unknown operation: {operation}")

        return result

    except Exception as e:
        logging.error(f"Exception occurred: {str(e)} | Operation: {operation} | x: {x}, y: {y}")
        return f"Error: {str(e)}"

def main():
    print("Result 1:", perform_computation(10, 5, 'add'))
    print("Result 2:", perform_computation(10, 0, 'divide'))  # Will trigger division by zero
    print("Result 3:", perform_computation(10, 'a', 'multiply'))  # Will trigger a TypeError
    print("Result 4:", perform_computation(10, 5, 'unknown'))  # Will trigger a ValueError

if __name__ == "__main__":
    main()

"""41.	Define a class for a Rectangle that calculates the area and perimeter."""

class Rectangle:
    def __init__(self, length, width):
        self.length = length
        self.width = width

    def calculate_area(self):
        return self.length * self.width

    def calculate_perimeter(self):
        return 2*(self.length + self.width)

o1= Rectangle(5, 8)
result1 = o1.calculate_area()
result2 = o1.calculate_perimeter()
print(result1)
print(result2)

"""42.	Create a class that models a BankAccount with methods to deposit and withdraw funds."""

class Bank_Account:
	def __init__(self):
		self.balance=0
		print("hello")

	def deposit(self):
		amount=float(input("Enter amount to be Deposited: "))
		self.balance += amount
		print("\n Amount Deposited:",amount)

	def withdraw(self):
		amount = float(input("Enter amount to be Withdrawn: "))
		if self.balance>=amount:
			self.balance-=amount
			print("\n You Withdraw:", amount)
		else:
			print("\n Insufficient balance ")

	def display(self):
		print("\n Net Available Balance=",self.balance)

s = Bank_Account()

s.deposit()
s.withdraw()
s.display()

"""43.	Implement inheritance by creating a Circle class that inherits from a Shape class."""

class Shape:
    def __eq__(self, other):
        return False
    def type(self):
        return "Shape"

class Circle(Shape):
    def __init__(self, x, y, radius):
        self.centre =(x,y)
        self.radius = radius
    def type(self):
        return "Circle"

c1 = Circle(1,2,3)
print(c1.type)

"""44.	Write a program that demonstrates encapsulation through private class members."""

class Base:
    def __init__(self):
        self.a = "swati"
        self.__c = "kashish"

# Creating a derived class
class Derived(Base):
    def __init__(self):
        Base.__init__(self)
        print("Calling private member of base class: ")
        print(self.__c)


# Driver code
obj1 = Base()
print(obj1.a)

"""45.	Create an abstract class Animal with subclasses for Dog and Cat."""

from abc import ABC, abstractmethod
class Animal(ABC):
  def move(self):
    pass

class Dog(Animal):
  def move(self):
    print("I can bark")

class cat(Animal):
  def move(self):
    print("I can Meow")

o1 = Dog()
o1.move()
o2 = cat()
o2.move()

"""46.	Implement a binary search algorithm on a sorted list of numbers."""

def search(arr, target):
    low = 0
    high = len(arr) - 1

    while low <= high:
        mid = (low + high) // 2

        if arr[mid] == target:
            return mid

        elif arr[mid] > target:
            high = mid - 1

        else:
            low = mid + 1

    return -1

arr = [1, 3, 5, 7, 9, 11, 13, 15]
target = 7

result = search(arr, target)

if result != -1:
    print(f"Element found in list")
else:
    print(f"Element not found in the list.")

"""47.	Write a sorting algorithm (e.g., bubble sort) and test its functionality."""

def bubble_sort(arr):

    for n in range(len(arr) - 1, 0, -1):

        swapped = False

        for i in range(n):
            if arr[i] > arr[i + 1]:

                arr[i], arr[i + 1] = arr[i + 1], arr[i]

                swapped = True

        if not swapped:
            break


arr = [39, 12, 18, 85, 72, 10, 2, 18]
print("Unsorted list is:")
print(arr)

bubble_sort(arr)

print("Sorted list is:")
print(arr)

"""48.	Create a program that utilizes a hashtable to store and retrieve key-value pairs."""

class Node:
	def __init__(self, key, value):
		self.key = key
		self.value = value
		self.next = None


class HashTable:
	def __init__(self, capacity):
		self.capacity = capacity
		self.size = 0
		self.table = [None] * capacity

	def _hash(self, key):
		return hash(key) % self.capacity

	def insert(self, key, value):
		index = self._hash(key)

		if self.table[index] is None:
			self.table[index] = Node(key, value)
			self.size += 1
		else:
			current = self.table[index]
			while current:
				if current.key == key:
					current.value = value
					return
				current = current.next
			new_node = Node(key, value)
			new_node.next = self.table[index]
			self.table[index] = new_node
			self.size += 1

	def search(self, key):
		index = self._hash(key)

		current = self.table[index]
		while current:
			if current.key == key:
				return current.value
			current = current.next

		raise KeyError(key)

	def remove(self, key):
		index = self._hash(key)

		previous = None
		current = self.table[index]

		while current:
			if current.key == key:
				if previous:
					previous.next = current.next
				else:
					self.table[index] = current.next
				self.size -= 1
				return
			previous = current
			current = current.next

		raise KeyError(key)

	def __len__(self):
		return self.size

	def __contains__(self, key):
		try:
			self.search(key)
			return True
		except KeyError:
			return False

if __name__ == '__main__':

	ht = HashTable(5)

	ht.insert("apple", 3)
	ht.insert("banana", 2)
	ht.insert("cherry", 5)

	print("apple" in ht)
	print("durian" in ht)

	print(ht.search("banana"))

	ht.insert("banana", 4)
	print(ht.search("banana"))

	ht.remove("apple")
	print(len(ht))

"""49.	Develop a function that sorts a list of dictionaries based on the values of a specific key"""

d = {2: 5, 1: 2, 5: 12, 4: 11}

print("Dictionary", d)

# Sorting and printing dictionary keys
for i in sorted(d.keys()):
    print(i, end=" ")

"""50.	Write a program that implements a breadth-first search for a graph structure."""

graph = {
  '5' : ['3','7'],
  '3' : ['2', '4'],
  '7' : ['8'],
  '2' : [],
  '4' : ['8'],
  '8' : []
}

visited = [] # List for visited nodes.
queue = []     #Initialize a queue

def bfs(visited, graph, node): #function for BFS
  visited.append(node)
  queue.append(node)

  while queue:          # Creating loop to visit each node
    m = queue.pop(0)
    print (m, end = " ")

    for neighbour in graph[m]:
      if neighbour not in visited:
        visited.append(neighbour)
        queue.append(neighbour)

# Driver Code
print("Following is the Breadth-First Search")
bfs(visited, graph, '5')    # function calling

"""51.	Use Matplotlib to plot a simple line graph representing a mathematical function."""

import matplotlib.pyplot as plt
import numpy as np

x = np.array([1, 2, 3, 4])
y = x*2

plt.plot(x, y)
plt.show()

"""52.	Create a program that plots a scatter plot for random data points."""

import matplotlib.pyplot as plt

x = [5,7,8,7,2,17,2,9,4,11,12,9,6]
y = [99,86,87,88,111,86,103,87,94,78,77,85,86]

plt.scatter(x, y)
plt.show()

"""53.	Implement a bar chart visualizing sales data over a month."""

import matplotlib.pyplot as plt

days = [
    '1', '2', '3', '4', '5', '6', '7', '8', '9', '10',
    '11', '12', '13', '14', '15', '16', '17', '18', '19', '20',
    '21', '22', '23', '24', '25', '26', '27', '28', '29', '30'
]
sales = [
    200, 250, 300, 150, 400, 350, 500, 600, 450, 550,
    700, 650, 600, 500, 550, 600, 650, 700, 750, 800,
    900, 850, 950, 1000, 1100, 1200, 1150, 1050, 1200, 1250
]

plt.figure(figsize=(10, 6))
plt.bar(days, sales, color='skyblue')

"""54.	Write a program that demonstrates plotting the Fibonacci sequence with PyLab."""

import numpy as np
import matplotlib.pyplot as plt

def fibonacci(n):
    fib_seq = [0, 1]
    for i in range(2, n):
        fib_seq.append(fib_seq[-1] + fib_seq[-2])
    return fib_seq

num_terms = 20

fib_seq = fibonacci(num_terms)

x = np.arange(1, num_terms + 1)

plt.plot(x, fib_seq, marker='o', color='b', label='Fibonacci Sequence')

plt.xlabel('Term Number')
plt.ylabel('Fibonacci Value')
plt.title('Fibonacci Sequence')

plt.legend()

plt.grid(True)
plt.show()

"""55.	Create a function that plots the trajectory of a projectile motion."""

import numpy as np
import matplotlib.pylab as plot

v = 30
g = -9.8

theta = np.arange(25,65,5)

t = ((2 * v) * np.sin(theta)) / g
t1 = np.array(t)



x = ((v * t1) * np.cos(theta))
y = ((v * t1) * np.sin(theta)) - ((0.5 * g) * (t ** 2))

plot.plot(x,y)
plot.show()

"""56.	Implement the 0/1 knapsack algorithm to solve a simple problem."""

def knapSack(W, wt, val, n):
   if n == 0 or W == 0 :
      return 0
   if (wt[n-1] > W):
      return knapSack(W, wt, val, n-1)
   else:
      return max(val[n-1] + knapSack(W-wt[n-1], wt, val, n-1),
         knapSack(W, wt, val, n-1))
val = [50,100,150,200]
wt = [8,16,32,40]
W = 64
n = len(val)
print (knapSack(W, wt, val, n))

"""57.	Write a dynamic programming solution for finding the longest common subsequence."""

def lcs(X, Y):
	# find the length of the strings
	m = len(X)
	n = len(Y)

	L = [[None]*(n + 1) for i in range(m + 1)]

	for i in range(m + 1):
		for j in range(n + 1):
			if i == 0 or j == 0 :
				L[i][j] = 0
			elif X[i-1] == Y[j-1]:
				L[i][j] = L[i-1][j-1]+1
			else:
				L[i][j] = max(L[i-1][j], L[i][j-1])

	return L[m][n]
X = "AGGTAB"
Y = "GXTXAYB"
print("Length of LCS is ", lcs(X, Y))

"""58.	Create a program to visualize dynamic programming approaches for the Fibonacci sequence."""

FibArray = [0, 1]

def fibonacci(n):
    if n<0:
        print("Incorrect input")
    elif n<= len(FibArray):
        return FibArray[n-1]
    else:
        temp_fib = fibonacci(n-1)+fibonacci(n-2)
        FibArray.append(temp_fib)
        return temp_fib

print(fibonacci(9))

"""59.	Develop a divide-and-conquer algorithm to sort an array."""

def divide_conq(arr1, arr2):
    i = 0
    j = 0
    result = []
    while(i < len(arr1) and j < len(arr2)):
        if arr2[j] > arr1[i]:
            result.append(arr1[i])
            i += 1
        else:
            result.append(arr2[j])
            j += 1

    while(i < len(arr1)):
        result.append(arr1[i])
        i += 1
    while(j < len(arr2)):
        result.append(arr2[j])
        j += 1
    return result

def d_c(arr):
    if len(arr) <= 1:
        return arr
    mid = len(arr)//2
    left = d_c(arr[:mid])
    right = d_c(arr[mid:])

    return divide_conq(left, right)

if __name__ == '__main__':
    arr = [12, 11, 13, 5, 6, 7]
    print("Given array is")
    print(*arr)
    arr = d_c(arr)
    print("\nSorted array is ")
    print(*arr)

"""60.	Write a Python function that uses memoization to optimize a recursive problem"""

def facto(n):
	if n == 1:
		return 1
	else:
		return n * facto(n-1)

print(facto(5))
print(facto(5))